<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>cat.calidos.snow-package</groupId>
	<artifactId>snow-package</artifactId>
	<version>0.8.19-SNAPSHOT</version>
	<packaging>war</packaging>

	<name>Snow Package application</name>
	<description>JSX support for Morfeu</description>
	<inceptionYear>2020</inceptionYear>
	<!-- http://localhost:3000/?config=%2Fproxy%2Fconfig.json -->
	<!--  mvn clean compile jetty:run -D__RESOURCES_PREFIX=file://$(pwd)/target/classes/ -->

	<!--
	MORFEU
	mvn resources:resources jetty:run \
		-D__RESOURCES_PREFIX=http://localhost:8990/ \
		-D__PROXY_PREFIX=http://localhost:8990
	SNOWPACKAGE
	mvn resources:resources jetty:run \
		-D__RESOURCES_PREFIX=file://$(pwd)/../snowpackage-site/src/snowpackage/ \
		-D__PROXY_PREFIX=http://localhost:3010
	BROWSER
	http://localhost:3000/?config=%2Fproxy%2Fsite%2Fsnowpackage%2Fconfig.json
	-->
	<properties>
		<jetty-http-port>8990</jetty-http-port>
		<jetty-stop-port>8991</jetty-stop-port>
		<jetty-context-path>/</jetty-context-path>
		<webapp-prefix>http://localhost:${jetty-http-port}${jetty-context-path}/</webapp-prefix>
		<dagger-2-version>2.51.1</dagger-2-version>
		<jackson-2-version>2.17.2</jackson-2-version>
		<jetty-version>12.0.8</jetty-version>
		<freemarker-version>2.3.33</freemarker-version>
		<morfeu-version>0.8.18-SNAPSHOT</morfeu-version>
		<selenide-version>5.6.1</selenide-version>
		<selenium-version>3.141.59</selenium-version>
		<jupiter-version>5.5.2</jupiter-version>
		<junit-platform-version>1.5.2</junit-platform-version>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<scm.host_>github.com</scm.host_>
		<developer.id_>danigiri</developer.id_>
		<maven.compiler.release>20</maven.compiler.release>
		<checkout.folder_>${project.build.directory}/../src/main/angular</checkout.folder_>	<!-- release perform /target/ folder -->
	</properties>

	<scm>	<!-- mvn -B release:prepare release:perform -Darguments=" -Dskip-build-client=true -DskipITs -Djetty.skip -DaltDeploymentRepository=REPO::default::file://$HOME/.m2/repository" -->
		<connection>scm:git:git@${scm.host_}:${developer.id_}/snow-package.git</connection>
		<url>scm:git:git@${scm.host_}:${developer.id_}/snow-package.git</url>
		<developerConnection>scm:git:git@${scm.host_}:${developer.id_}/snow-package.git</developerConnection>
		<tag>v0.8.18</tag>
	</scm>

	<build>

		<resources>	<!-- skip moving node modules about -->
			<resource>
				<directory>src/main/resources</directory>
				<excludes>	<!-- avoid duplicates -->
					<exclude>metadata/</exclude>
				</excludes>
			</resource>
			<resource>
				<directory>src/test/resources</directory>
			</resource>
			<!-- resource>
				<directory>src/main/angular/dist</directory>
				<targetPath>${project.build.directory}/dist</targetPath>
			</resource-->
			<resource>	<!-- copy the react app so we can test it -->
				<directory>src/test/react</directory>
				<targetPath>${project.build.outputDirectory}/test-resources/site/</targetPath>
				<excludes>
					<exclude>node_modules/**</exclude>
				</excludes>
			</resource>
			<resource>	<!--  application metadata, like the version, goes to the webapp root -->
				<directory>src/main/resources/metadata</directory>
				<filtering>true</filtering>
				<targetPath>${project.build.outputDirectory}/metadata</targetPath>
			</resource>
		</resources>

		<plugins>
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.13.0</version>
				<configuration>
					<annotationProcessorPaths>
						<path>
							<groupId>com.google.dagger</groupId>
							<artifactId>dagger-compiler</artifactId>
							<version>${dagger-2-version}</version>
						</path>
					</annotationProcessorPaths>
				</configuration>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<version>3.4.1</version>
				<executions>
					<execution>
						<goals>
							<goal>test-jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>	<!--  mvn package war:war install -DarchiveClasses=true -DattachClasses=true -DskipITs -DskipTests=true -Djetty.skip -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>3.4.0</version>
				<configuration>
					<webResources>
						<resource>	<!-- the images of resources like the code slots make it to the war -->
							<directory>${project.basedir}/src/main/angular/src/assets</directory>
						</resource>
						<resource>
							<directory>${project.build.outputDirectory}/metadata</directory>	<!-- metadata -->
							<targetPath>metadata</targetPath>
						</resource>
					</webResources>
					<attachClasses>true</attachClasses>	<!-- creates a jar with the classes and attaches an artifact -->
				</configuration>
			</plugin>

			<plugin>	<!-- we specift the name of the releases -->
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-release-plugin</artifactId>
				<version>3.0.1</version>
				<configuration>
					<tagNameFormat>v@{project.version}</tagNameFormat>
				</configuration>
			</plugin>
			<plugin>	<!-- when doing a release:perform, the project is checked out freshly, need a npm install -->
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>3.2.0</version>
				<executions>
					<execution>
						<id>install-npm</id>
						<phase>package</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<executable>bash</executable>
							<workingDirectory />
							<arguments>
								<argument>-cx</argument>
								<argument>[ -d ${checkout.folder_} ] &amp;&amp; cd ${checkout.folder_} &amp;&amp; npm install || true
								</argument>
							</arguments>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.eclipse.jetty.ee9</groupId>
				<artifactId>jetty-ee9-maven-plugin</artifactId>
				<version>${jetty-version}</version>
				<dependencies>	<!--  to add GZIP compression -->
				</dependencies>
				<configuration>
					<!-- looks like we have some code trying to access private
					methods for  java.util.OptionalInt() -->
					<!-- only if if we run in forked mode this is picked up -->
					<jvmArgs>--add-opens=java.base/java.util=ALL-UNNAMED</jvmArgs>
					<!--dumpOnStart>false</dumpOnStart--> <!-- set to true for debugging -->
					<!--scanIntervalSeconds>0</scanIntervalSeconds-->
					<!--reload>manual</reload-->
					<stopPort>${jetty-stop-port}</stopPort>
					<stopKey>STOP</stopKey>
					<useTestScope>true</useTestScope>
					<webApp>
						<contextPath>${jetty-context-path}</contextPath>
						<!-- we add this extra classpath so jetty loads templates and all jar deps like jackson and stuff -->
						<!--extraClasspath>${project.build.directory}/${project.artifactId}-${project.version}/WEB-INF/lib</extraClasspath-->
						<resourceBases>
							<resourceBase>${project.basedir}/src/main/angular/src/assets</resourceBase>
							<resourceBase>${project.basedir}/src/test/resources</resourceBase>
							<resourceBase>${project.build.outputDirectory}</resourceBase>
							<resourceBase>${project.build.outputDirectory}/test-resources</resourceBase>
						</resourceBases>
						<webInfIncludeJarPattern>^$</webInfIncludeJarPattern>
					</webApp>
					<systemProperties>
						<systemProperty>
							<name>org.eclipse.jetty.annotations.maxWait</name>
							<value>60000</value>
						</systemProperty>
						<systemProperty> <!-- mvn jetty:run -D__RESOURCES_PREFIX=file://$(PWD)/  -->
							<name>__RESOURCES_PREFIX</name>
							<value>${resources-prefix}</value>
						</systemProperty>
						<systemProperty> <!-- mvn jetty:run -D__ASYNC_TIMEOUT=1000  -->
							<name>__ASYNC_TIMEOUT</name>
							<value>${async-timeout}</value>
						</systemProperty>
					</systemProperties>
					<httpConnector>
						<port>${jetty-http-port}</port>
					</httpConnector>
				</configuration>
				<executions>
					<execution>	<!-- start jetty when target is integration testing -->
					<id>start-jetty-integration-test</id>
					<phase>pre-integration-test</phase>
					<goals>
						<goal>run</goal>
					</goals>
					<configuration>
						<scanIntervalSeconds>0</scanIntervalSeconds>
						<daemon>true</daemon>
					</configuration>
					</execution>
					<execution>	<!-- stop jetty when completed integration testing-->
						<id>stop-jetty</id>
						<phase>post-integration-test</phase>
						<goals>
							<goal>stop</goal>
						</goals>
						<configuration>
							<stopKey>STOP</stopKey>
							<stopPort>${jetty-stop-port}</stopPort>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>3.2.5</version>
				<configuration>
					<excludes>	<!-- no UI/integration tests in unit testing -->
						<exclude>**/*IntTest*</exclude>
						<exclude>**/*UITest*</exclude>
						<exclude>**/*ComponentTest*</exclude>
					</excludes>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<version>3.2.5</version>
				<configuration>
					<systemPropertyVariables>
						<TMP_FOLDER>${project.build.directory}/integration-tests-tmp</TMP_FOLDER>
					</systemPropertyVariables>
				</configuration>
				<executions>
					<execution>
						<goals>
							<goal>integration-test</goal>
							<goal>verify</goal>
						</goals>
						<configuration>
							<includes>
								<include>**/*IntTest*</include>
								<include>**/*UITest*</include>
								<include>**/*ComponentTest*</include>
							</includes>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>

	</build>
	<dependencies>

		<!-- mvn package war:war install -DarchiveClasses=true -DattachClasses=true -DskipITs -DskipTests=true -Djetty.skip -->
		<dependency>
			<groupId>cat.calidos.morfeu</groupId>
			<artifactId>morfeu-webapp</artifactId>
			<version>${morfeu-version}</version>
			<classifier>classes</classifier>	<!-- this is how the extra jar is generated in morfeu -->
		</dependency>
		<dependency>
			<groupId>cat.calidos.morfeu</groupId>
			<artifactId>morfeu-webapp</artifactId>
			<version>${morfeu-version}</version>
			<classifier>tests</classifier>	<!-- this is how the extra test jar is generated in morfeu -->
			<type>test-jar</type>
			<scope>test</scope>
		</dependency>

		<!-- DEPENDENCY INJECTION dependencies (optionals not included in the final WAR archive) -->
		<dependency>
			<groupId>com.google.dagger</groupId>
			<artifactId>dagger</artifactId>
			<version>${dagger-2-version}</version>
		</dependency>
		<dependency>
			<groupId>com.google.dagger</groupId>
			<artifactId>dagger-producers</artifactId>
			<version>${dagger-2-version}</version>
		</dependency>
		<dependency>
			<groupId>com.google.dagger</groupId>
			<artifactId>dagger-compiler</artifactId>
			<version>${dagger-2-version}</version>
			<optional>true</optional>
		</dependency>

		<!-- Jackson JSON lib stuff -->
		 <!-- the core, which includes Streaming API, shared low-level abstractions (but NOT data-binding) -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-core</artifactId>
			<version>${jackson-2-version}</version>
		</dependency>

		 <!-- Just the annotations; use this dependency if you want to attach annotations
		      to classes without connecting them to the code. -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-annotations</artifactId>
			<version>${jackson-2-version}</version>
		</dependency>

		<!-- databinding; ObjectMapper, JsonNode and related classes are here -->
		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>${jackson-2-version}</version>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.dataformat</groupId>
			<artifactId>jackson-dataformat-yaml</artifactId>
			<version>${jackson-2-version}</version>
		</dependency>
		<dependency>
			<groupId>com.fasterxml.jackson.datatype</groupId>
			<artifactId>jackson-datatype-jdk8</artifactId>
			<version>${jackson-2-version}</version>
		</dependency>

		<!-- JETTY RUNTIME -->
		<dependency>
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>jetty-server</artifactId>
			<version>${jetty-version}</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>jakarta.servlet</groupId>
			<artifactId>jakarta.servlet-api</artifactId>
			<version>5.0.0</version>
			<scope>provided</scope>
		</dependency>
		
		<!-- HELPERS -->
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.16.1</version>
		</dependency>
		<dependency>
			<groupId>org.apache.httpcomponents</groupId>
			<artifactId>httpasyncclient</artifactId>
			<version>4.1.5</version>
		</dependency>

		<!-- logging -->
		<dependency>
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>jetty-slf4j-impl</artifactId>
			<version>${jetty-version}</version>
		</dependency>
		<!--dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>1.3.0-alpha5</version>
			<scope>provided</scope>
		</dependency-->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>2.0.13</version>
		</dependency>
		
		<!--  templating -->
		<dependency>
			<groupId>org.freemarker</groupId>
			<artifactId>freemarker</artifactId>
			<version>${freemarker-version}</version>
		</dependency>

		<!-- request proxying -->
		<dependency>
			<groupId>org.mitre.dsmiley.httpproxy</groupId>
			<artifactId>smiley-http-proxy-servlet</artifactId>
			<version>2.0</version>
		</dependency>

		<!-- process execution -->
		<dependency>
			<groupId>org.zeroturnaround</groupId>
			<artifactId>zt-exec</artifactId>
			<version>1.12</version>
		</dependency>
		<dependency>
			<groupId>org.zeroturnaround</groupId>
			<artifactId>zt-process-killer</artifactId>
			<version>1.11</version>
		</dependency>

		<!-- UNIT TESTING -->
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-engine</artifactId>
			<version>${jupiter-version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.mockito</groupId>
			<artifactId>mockito-core</artifactId>
			<version>5.11.0</version>
			<scope>test</scope>
		</dependency>

		<!-- INTEGRATION TESTING -->
		<dependency>	<!-- web driver manager -->
			<groupId>io.github.bonigarcia</groupId>
			<artifactId>webdrivermanager</artifactId>
			<version>5.8.0</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-java</artifactId>
			<version>${selenium-version}</version>
			<scope>test</scope>
			<exclusions>
                <!--exclusion>
                   <groupId>org.seleniumhq.selenium</groupId>
                    <artifactId>selenium-chrome-driver</artifactId>
                </exclusion-->
				<exclusion>
					<groupId>org.seleniumhq.selenium</groupId>
					<artifactId>selenium-firefox-driver</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.seleniumhq.selenium</groupId>
					<artifactId>selenium-ie-driver</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.seleniumhq.selenium</groupId>
					<artifactId>selenium-iphone-driver</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.seleniumhq.selenium</groupId>
					<artifactId>selenium-htmlunit-driver</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.seleniumhq.selenium</groupId>
					<artifactId>selenium-android-driver</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-server</artifactId>
			<version>${selenium-version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.seleniumhq.selenium</groupId>
			<artifactId>selenium-chrome-driver</artifactId>
			<version>${selenium-version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.codeborne</groupId>
			<artifactId>selenide</artifactId>
			<version>${selenide-version}</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.xmlunit</groupId>
			<artifactId>xmlunit-core</artifactId>
			<version>2.9.1</version>
		</dependency>

	</dependencies>

	<repositories>
	</repositories>

	<licenses>
		<license>
			<name>The Apache Software License, Version 2.0</name>
			<url>http://www.apache.org/licenses/LICENSE-2.0</url>
			<comments>Copyright (C) 2024 Daniel Giribet</comments>
		</license>
	</licenses>

	<developers>
		<developer>
			<id>danigiri</id>
			<name>Daniel Giribet</name>
			<email>dani AT calidos DOT cat</email>
			<url>http//dani.calidos.com</url>
			<roles>
				<role>creator</role>
				<role>developer</role>
			</roles>
			<timezone>+1</timezone>
		</developer>
	</developers>

</project>
