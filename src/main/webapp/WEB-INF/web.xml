<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee https://www.oracle.com/webfolder/technetwork/jsc/xml/ns/javaee/web-app_4_0.xsdd"
	version="4.0" 
	metadata-complete="true">

	<context-param>
		<description>Resources uri prefix (default value only for integration testing), end with '/'</description>
		<param-name>__RESOURCES_PREFIX</param-name>
		<param-value>file://PLEASE_DEFINE_ME/</param-value>
	</context-param>
		<context-param>
		<description>Proxy uri prefix</description>
		<param-name>__PROXY_PREFIX</param-name>
		<param-value>http://localhost:3001/</param-value>
	</context-param>
	

	<!-- It is important to distinguish between 'raw' content (RESOURCES_PREFIX) from data processed and by enriched 
		by the servlets themselves. For example, in the default maven jetty configuration: [/morfeu/documents/]test-resources/documents/document1.json 
		will invoke the servlet and then the servlet will go and fetch the raw data from [RESOURCES_PREFIX]test-resources/documents/document1.json 
		then it will process it and enrich it in any way necessary. Usually the content will be a superset of the raw data. -->

	<!-- Generic request dispatcher -->
	<servlet>
		<display-name>generic-servlet</display-name>
		<servlet-name>SnowPackageServlet</servlet-name>
		<servlet-class>cat.calidos.snowpackage.control.SPServlet</servlet-class>
		<async-supported>false</async-supported>
	</servlet>

	<servlet-mapping>	<!-- this is more concrete therefore will match instead of the proxy for content -->
		<servlet-name>SnowPackageServlet</servlet-name>
		<url-pattern>/dyn/*</url-pattern>
	</servlet-mapping>

<!-- static content should be seved by jetty and not angular -->
	<!-- servlet
		<display-name>static-servlet</display-name>
		<servlet-name>DefaultServletForStaticContent</servlet-name>
		<servlet-class>org.eclipse.jetty.servlet.DefaultServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>DefaultServletForStaticContent</servlet-name>
		<url-pattern>/documents/*</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>DefaultServletForStaticContent</servlet-name>
		<url-pattern>/models/*</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>DefaultServletForStaticContent</servlet-name>
		<url-pattern>/config.json</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>DefaultServletForStaticContent</servlet-name>
		<url-pattern>/catalogues.json</url-pattern>
	</servlet-mapping>
-->
	<servlet>
		<servlet-name>proxy</servlet-name>
		<servlet-class>cat.calidos.morfeu.proxy.MorfeuProxyServlet</servlet-class>
		<init-param>
			<param-name>targetUri</param-name>
			<param-value>${__PROXY_PREFIX}</param-value>
		</init-param>
		<init-param>
			<param-name>log</param-name>
			<param-value>true</param-value>
		</init-param>
	</servlet>
<!-- anything that matches /site will be proxied to backend site webserver -->
	<servlet-mapping>	
		<servlet-name>proxy</servlet-name>
		<url-pattern>/site/*</url-pattern>
	</servlet-mapping>
	<servlet-mapping>	
		<servlet-name>proxy</servlet-name>
		<url-pattern>/proxy/site/*</url-pattern>
	</servlet-mapping>


	<!--filter>
		<filter-name>SnowPackageRequestFilter</filter-name>
		<filter-class>cat.calidos.snowpackage.control.SPRequestFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>SnowPackageRequestFilter</filter-name>
		<url-pattern>/*</url-pattern> 
	</filter-mapping-->



</web-app>
